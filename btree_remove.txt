#include <iostream>
#include <iomanip>
using namespace std;

struct Node
{
	int value;
	Node *right;
	Node *left;

	Node(int value) : value(value), right(nullptr), left(nullptr)
	{
	}
};

class BinaryTree
{
private:
	

	Node* addNode(Node *node, int value)
	{
		if ( !node )
			return new Node(value);

		if ( value > node-> value )
			node->right = addNode( node->right, value );
		else 
			node->left = addNode ( node->left, value );

		return node;
	}

	void inOrder(Node *node)
	{
		if(node)
		{
			inOrder(node->left);
			cout<<node->value<<endl;
			inOrder(node->right);
		}
	}

	void preOrder(Node *node)
	{
		if (node)
		{
			cout<<node->value<<endl;
			preOrder(node->left);
			preOrder(node->right);
		}
	}

	void postOrder(Node *node)
	{
		if (node)
		{
			postOrder(node->left);
			postOrder(node->right);
			cout<<node->value<<endl;
		}
	}


	Node *removeNode(Node *node, int value)
	{
		if (value > node->value)
			node->right = removeNode(node->right , value);

		else if(value < node->value)
			node->left = removeNode(node->left, value);

		else
		{
			if (nullptr == node->left && nullptr == node->right)
			{
				delete node;
				return nullptr;
			}

			if (nullptr == node->left && nullptr != node->right)
			{
				Node *orphan = node->right;
				delete node;
				return orphan;
			}

			if(nullptr != node->left && nullptr == node->right)
			{
				Node *orphan = node->left;
				delete node;
				return orphan;
			}

			Node *succesor = node->right;

			while ( succesor->left != nullptr )
				succesor = succesor->left; 

			node->value = succesor->value;
			node->right = removeNode (node->right, succesor->value);
		}
		return node;
	}
	
public: 
	Node *root;

	BinaryTree(): root(nullptr)
	{
	}

	void add(int value)
	{
		root = addNode(root, value);
	}

	void print()
	{
		inOrder(root);
	}

	void save()
	{
		preOrder(root);
	}

	void removeAll()
	{
		postOrder(root);
	}

	void remove (int value)
	{
		root = removeNode(root, value);
	}


		void printDebugIN(Node *node)
	{
		static int level = 0;
		if (node)
		{
			level++;
			printDebugIN(node->right);
			cout<< setw( level * 4 )<<node->value<<endl;
			printDebugIN(node->left);
			level--;
		}
	}

};

int main()
{
	BinaryTree ped;
	int stop, num;

	cout<<"Enter Stop value : ";
	cin>>stop;

	while ( cout<<"Enter value : ",
		cin>>num,
		num != stop )
	{
		ped.add(num);
	}

	
	cout<<endl<<"Tree : "<<endl;
	ped.printDebugIN(ped.root);


	while ( cout<<" Enter value to remove : ",
	cin >> num, 
	num )
	{
	ped.remove(num);
	ped.printDebugIN(ped.root);
	}
	


	cout<<endl<<"InOrder: "<<endl;
	ped.print();

	cout<<endl<<"preOrder: "<<endl;
	ped.save();

	cout<<endl<<"postOrder: "<<endl;
	ped.removeAll();



	return 0;

}