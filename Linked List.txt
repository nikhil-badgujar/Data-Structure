Single LL in "C"

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

// defining structure
struct node
{
	int value;
	struct node *next;
};

// defining global variables
struct node *head=NULL;
struct node *tail=NULL;
struct node *current;
struct node *temp;

void addToBack(int value)
{
	//create new node
	struct node *newnode = (struct node *)malloc(1 * sizeof (struct node));

	//set user given value inside node
	newnode->value = value;
	newnode->next = NULL;

	//If this is the first node then head will be NULL
	//2nd node onwards will go to next
	if (NULL == head)
		head = newnode;
	else
		tail->next = newnode;
	tail = newnode;
}

//to add new node
void addToFront(int newvalue)
{
	struct node *newnode = (struct node *)malloc(sizeof(struct node));
	newnode->value = newvalue;
	newnode->next = NULL;
	if (NULL == head)
		tail = newnode;
	else
		newnode->next = head;
	head = newnode;
}

//print all nodes in Linked List
void printForward()
{
	for (current = head; current != NULL; current=current->next)
		printf("%d\t",current->value);
}

int removeAll()
{
	int cnt=0;
	
	while(head!=NULL)
	{
		temp = head;
		head = head->next;
		free (temp);
		++cnt;
	}
	tail = NULL;
	return cnt;
}

int main()
{
	struct node *newnode;
	int num;
	int c;

	//adding to front
	addToFront(99);
	printForward();

	// Keep taing input from user
	while (printf("Enter Number (0 to stop): "),
		scanf("%d", &num),
		num!=0)
	{
		addToBack(num);
	};

	//adding to front again
	addToFront(11);
	printForward();

	c=removeAll();
	printf("\nCount is: %d",c);

	getch();
	return 0;
}

========================================================================

Single LL in "C++"

#include <iostream>
#include <conio.h>
using namespace std;


class node
{
public:	int value;
		node *next;

		//set user given value inside node
		node (int value)
		{
			this->value = value;
			this->next = nullptr;
		}

};

class SingleLinkedlist
{
	node *head;
	node *tail;
	node *current;
public:
	SingleLinkedlist():head(nullptr),tail(nullptr)
	{}

	//adding to the back
	void addToBack(int value)
	{
		//create new node
		node *newnode = new node(value);
		
		newnode->value = value;
		newnode->next = nullptr;

		//If this is the first node then head will be NULL
	    //2nd node onwards will go to next
		if (nullptr == head)
		{
			head = newnode;
		}
		else
		{
			tail->next = newnode;
		}
		tail = newnode;
	}
	
	//adding new element to front
	void addToFront(int value)
	{
		//create new node
		node *newnode = new node(value);
			newnode->value = value;
			newnode->next = nullptr;

			//If this is the first node then head will be NULL
	        //2nd node onwards will go to next
			if(nullptr == head)
			{
				tail = newnode;
			}
			else
			{
				newnode->next = head;
			}
			head = newnode;
	}

	//printing elements
	void printForward()
	{
		for (current = head; current; current = current->next)
			printf("%d\t",current->value);
	}

	//for removing elements
	int removeAll()
	{
		int cnt=0;
		node *temp;
		while(head)
		{
			temp = head;
			head = head->next;
			delete temp;
			cnt++;
		}
		tail = nullptr;
		return cnt;
	}
};

int main()
{
	int num;
	SingleLinkedlist s1;

	// Keep taing input from user
	while(cout<<"Enter Number (0 to stop) ",
			cin>>num,
			num)
	{
		s1.addToBack(num);
	}
	
	//adding to front 
	s1.addToFront(99);

	s1.printForward();
	cout<<endl<<"Total elements deleted: "<<s1.removeAll()<<endl;

	getch();
	return 0;
}

===============================================================================



#include <iostream>
#include <conio.h>
using namespace std;

class node
{
public:	int value;
		node *next;
		node *prev;

		//set user given value inside node
		node (int value)
		{
			this->value = value;
			this->next = nullptr;
		}
};

class DoublyLinkedList
{
	node *head;
	node *tail;
	node *current;
	node *bckwrd;

public:
	DoublyLinkedList():head(nullptr),tail(nullptr)
	{}

	//adding to the back
	void addToBack(int value)
	{
		//create new node
		node *newnode = new node(value);
		
		newnode->value = value;
		newnode->next = nullptr;

		//If this is the first node then head will be NULL
	    //2nd node onwards will go to next
		if (nullptr == head)
		{
			head = newnode;
		}
		else
		{
			tail->next = newnode;
			newnode->prev = tail;
		}
		tail = newnode;
	}

	//printing elements
	void printForward()
	{
		for (current = head; current; current = current->next)
			printf("%d\t",current->value);
	}

	//printing Backward
	void printBackward()
	{
		printf("\nBackward:");
		for (bckwrd = tail; bckwrd; bckwrd = bckwrd->prev )
			printf("%d\t",bckwrd->value);
	}
};

int main()
{
	int num;
	DoublyLinkedList d1;

	// Keep taing input from user
	while(cout<<"Enter Number (0 to stop) ",
			cin>>num,
			num)
	{
		d1.addToBack(num);
	}
	
	d1.printForward();

	printf("\n");

	d1.printBackward();

	getch();
	return 0;
}




